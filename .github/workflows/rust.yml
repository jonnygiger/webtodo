name: Rust CI with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  COMPOSE_PROJECT_NAME: todo_project # Used by docker-compose to prefix network names

jobs:
  build_and_test_dockerized:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      run: |
        docker --version
        docker compose version

    - name: Build builder image
      # This image is used by the test_runner service defined in docker-compose.yml (in the next step)
      # and also by the app service.
      run: docker build --target builder -t todo-builder -f todo_backend/Dockerfile .

    - name: Start db service
      # db service now uses the 'todo_network' defined in docker-compose.yml
      run: docker compose up -d db

    - name: Wait for db service to be healthy
      run: |
        echo "Waiting for db service to become healthy..."
        TIMEOUT=120
        INTERVAL=5
        ELAPSED=0
        while true; do
          # Ensure using COMPOSE_PROJECT_NAME for ps command if not globally set for all compose commands
          DB_STATUS=$(docker compose -p ${COMPOSE_PROJECT_NAME} ps db | grep 'healthy' | wc -l || true)
          if [ "$DB_STATUS" -ge 1 ]; then
            echo "Database service is healthy."
            break
          fi
          if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
            echo "Timeout waiting for db service to become healthy."
            echo "--- DB Logs ---"
            docker compose -p ${COMPOSE_PROJECT_NAME} logs db
            exit 1
          fi
          sleep $INTERVAL
          ELAPSED=$(($ELAPSED + $INTERVAL))
          echo "Still waiting for db... ($ELAPSED/$TIMEOUT seconds)"
        done

    - name: Run tests using test_runner service
      run: |
        echo "Running tests via docker compose..."
        docker compose -p ${COMPOSE_PROJECT_NAME} run --rm test_runner

    - name: Build and start app service
      run: |
        echo "Building and starting app service..."
        # Now build and start the 'app' service, which might depend on 'db'
        # The 'app' service will connect to the default docker-compose network,
        # or we could also connect it to $NETWORK_NAME if needed,
        # but its docker-compose.yml already defines how it connects to 'db'.
        docker compose up -d --build app

    - name: Wait for app service to be healthy
      # This is a new step to ensure the final app is healthy before finishing.
      run: |
        echo "Waiting for app service to become healthy..."
        TIMEOUT=120
        INTERVAL=5
        ELAPSED=0
        while true; do
          APP_STATUS=$(docker compose -p ${COMPOSE_PROJECT_NAME} ps app | grep 'healthy' | wc -l || true)
          if [ "$APP_STATUS" -ge 1 ]; then
            echo "Application service is healthy."
            break
          fi
          if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
            echo "Timeout waiting for app service to become healthy."
            echo "--- App Logs ---"
            docker compose -p ${COMPOSE_PROJECT_NAME} logs app
            exit 1
          fi
          sleep $INTERVAL
          ELAPSED=$(($ELAPSED + $INTERVAL))
          echo "Still waiting for app... ($ELAPSED/$TIMEOUT seconds)"
        done

    - name: Stop services
      if: always()
      run: |
        docker compose down -v
